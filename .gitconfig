[alias]

  # Adding
  a = add
  aa = add --all
  
  # Branching
  b     = branch
  brm   = branch -d # remove if branch-to-be-removed if fully merged into HEAD
  brmf  = branch -D # force removal
  # bt - branch track configures current branch to "track" same name from origin or specified remote
  bt    = "!f() { B=$(git symbolic-ref HEAD|cut -f3 -d/) && git config branch.$B.remote ${1:-origin} && git config branch.$B.merge refs/heads/$B; }; f"

  # Clone a repository including all submodules
  c = clone --recursive
  
  # Commit all changes
  ca = !git add -A && git commit -av

  # Checkout
  co = checkout
  
  # Switch to a branch, creating it if necessary
  go = checkout -B
  
  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  
  cid   = commit --amend -v # edit last commit's message
  cim   = commit -m
  cip   = commit -am 'WIP!'
  chp   = cherry-pick 

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Grep
  g    = "!git --no-pager grep --color --ignore-case -n"

  # GitK
  k     = "!gitk &"

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  lol = !"git log --pretty=format:'%C(yellow)%h|%Cred%ad|%Cblue%an|%Cgreen%d %Creset%s' --date=short | column -ts'|' | less -r"

  # Push
  po    = push origin HEAD

  # Pull
  pu    = pull
  pr    = pull --rebase
  
  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"
  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"
  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"
  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
  # Remove branches that have already been merged with master
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Rebase
  r     = rebase
  ra    = rebase --abort
  rc    = rebase --continue
  ri    = rebase --interactive
  ru    = rebase --onto @{upstream}

  # interactive rebase mostly for squashing/rearranging commits
  # operates on last 2 if not specified otherwise
  rih   = "!f() { git rebase -i HEAD~${1:-'2'}; }; f "

  # Reset
  rst   = reset
  rh   = reset --hard HEAD
  # reset to @{upstream} with confirmation
  roh   = "! git --no-pager ll -10 @{upstream} && read -p '^C to stop, anykey to continue' Z && git rst --hard @{upstream}"

  # reset to prev commit
  # used mostly to reset WIP commits(used as stash)
  rl   = reset @{1}

  # Status
  # View the current working tree status using the short format
  s = status -s
  # don't show untracked files
  st    = status --short --branch --untracked-files=no 
  # show all
  sta   = status --short --branch --untracked-files=normal

  # Show current `"user" <em@a.il>` configured
  w     = "! echo \"$(git config user.name) <$(git config user.email)> \"" 

  # me2 == "merge to" merge current branch to named one.
  # does 3 operations in one shot unless merge conflicts
  me2   = "!f() { git checkout $1 && git pull && git merge -; }; f "

  # codereview
  # http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html
  ribbon = tag --force _ribbon origin/master
  catchup = log --patch --reverse --topo-order _ribbon..origin/master

  scrum = "!git ll --since='yesterday' --author=\"`git config user.name`\""
  
  show-rev-number = !sh -c 'git rev-list --reverse HEAD | nl | awk \"{ if(\\$1 == "$0") { print \\$2 }}\"'

  #  ticket = "!f() { git checkout -b `echo $1|tr 'A-Z' 'a-z'` origin/master }; f "
  #
  # xargs
  # run command on modified files
  x = "!f() { git status --short --untracked-files=no | cut -d' ' -f3 | xargs $1; }; f"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore-global
  # Treat spaces before tabs and all kinds of trailing whitespace as an error.
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of
  # a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space
  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false
  quotepath = false

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[diff]
  tool = Kaleidoscope
[diff "plist"]
  textconv = plutil -convert xml1 -o -
[difftool]
  prompt = false

[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true
[mergetool]
  prompt = false
[merge]
  tool = Kaleidoscope

[log]
  date = relative

[push]
  default = current

[fetch]
  prune = true

[rebase]
  autosquash = true

[user]
  name  = Evgeny Aleksandrov
  email = evgeny@aleksandrov.ws

# read from given uri
# push to writable one
# http://bit.ly/g9c9Y2

[url "http://github.com/"]
  insteadOf = "gh:"
  insteadOf = "gh://"

[url "git@github.com:"]
  pushInsteadOf = "https://github.com/"
  pushInsteadOf = "http://github.com/"
  pushInsteadOf = "gh:"
  pushInsteadOf = "gh://"

[url "https://gist.github.com/"]
  insteadOf = "gist:"
[url "git@gist.github.com:"]
  pushInsteadOf = "https://gist.github.com/"
  pushInsteadOf = "http://gist.github.com/"
  pushInsteadOf = "gist:"

[url "git@heroku.com:"]
  insteadOf = "heroku:"
